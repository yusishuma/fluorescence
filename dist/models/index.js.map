{"version":3,"sources":["../../models/index.js"],"names":[],"mappings":";;;;;AAGA,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACrB,IAAI,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACnC,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,IAAI,SAAS,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;;;;;;AAO9C,QAAQ,CAAC,KAAK,CAAC,eAAe,GAAG,UAAS,OAAO,EAAE;AAC/C,QAAI,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,EAAE,CAAC;AAC9C,QAAI,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;AAC1C,QAAI,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;AAChD,QAAI,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;AAChC,QAAI,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC;AAC7B,QAAI,OAAO,GAAG,AAAC,IAAI,GAAG,KAAK,GAAI,KAAK,CAAC;AACrC,QAAI,WAAW,GAAG,EAAE,CAAC;AACrB,WAAO,CAAC,CAAC,GAAG,CAAC,CACT,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,EACpG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAC3B,CAAC,CAAC;CACN,CAAC;;;AAGF,QAAQ,CAAC,KAAK,CAAC,cAAc,GAAG,UAAU,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE;AACvE,QAAI,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,EAAE,CAAC;AAC9C,gBAAY,CAAC,GAAG,GAAG,EAAE,CAAC;AACtB,QAAI,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;AAChD,QAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AACpC,QAAI,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC;AAC7B,QAAI,WAAW,GAAG,EAAE,CAAC;AACrB,QAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;AAClC,QAAI,UAAU,GAAG,IAAI,GAAG,KAAK,GAAG,CAAC,EAAE;AAC/B,aAAK,CAAC,QAAQ,CAAC,GAAG;AACd,oBAAQ,EAAE,UAAU,GAAG,CAAC,IAAI,GAAG,CAAC,CAAA,GAAI,KAAK;;SAE5C,CAAC;KACL,MACI;AACD,aAAK,CAAC,QAAQ,CAAC,GAAG;AACd,oBAAQ,EAAE,CACN,UAAU,GAAG,IAAI,GAAG,KAAK,EACzB,KAAK,CACR;;SAEJ,CAAC;KACL;;AAED,WAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,CAAA;CACrE,CAAC;;AAEF,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC","file":"index.js","sourcesContent":["/**\n * Created by matonghe on 14/03/2017.\n */\nvar Q = require(\"q\");\nvar UserSchema = require(\"./user\");\nvar mongoose = require(\"mongoose\");\nvar CONSTANTS = require(\"../utils/constants\");\n\n/**\n * 分页\n * @param options\n * @returns {*}\n */\nmongoose.Model.findAllAndCount = function(options) {\n    let searchOption = options.searchOption || {};\n    let sortOption = options.sortOption || {};\n    let limit = options.limit || CONSTANTS.PAGE.NUM;\n    let field = options.field || {};\n    let page = options.page || 1;\n    let skipNum = (page * limit) - limit;\n    let populateOpt = [];\n    return Q.all([\n        this.find(searchOption, field).deepPopulate(populateOpt).skip(skipNum).limit(limit).sort(sortOption),\n        this.count(searchOption)\n    ]);\n};\n\n// 数组属性分页\nmongoose.Model.paginateForPro = function (id, property, options, callback) {\n    let searchOption = options.searchOption || {};\n    searchOption._id = id;\n    let limit = options.limit || CONSTANTS.PAGE.NUM;\n    let totalCount = options.totalCount;\n    let page = options.page || 1;\n    let populateOpt = [];\n    const field = options.field || {};\n    if (totalCount - page * limit < 0) {\n        field[property] = {\n            '$slice': totalCount - (page - 1) * limit\n\n        };\n    }\n    else {\n        field[property] = {\n            '$slice': [\n                totalCount - page * limit,\n                limit\n            ]\n\n        };\n    }\n\n    return this.findOne(searchOption, field).deepPopulate(populateOpt)\n};\n\nexports.User = mongoose.model(\"user\", UserSchema);"]}